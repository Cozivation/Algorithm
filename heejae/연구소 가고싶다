from collections import deque
ans = 0
def bfs():
	tmp = [arr[i][:] for i in range(n)]
	q = deque([[vir[i][0],vir[i][1]] for i in range(len(vir))])
	while q:
		x, y = q.popleft()
		for dx, dy in ((1,0),(-1,0),(0,1),(0,-1)):
			if x + dx != -1 and y + dy != -1 and x + dx != n and y + dy != m and tmp[x+dx][y+dy] == 0:
				tmp[x+dx][y+dy] = 2
				q.append([x+dx,y+dy])
	sum = 0
	for i in range(n):
		sum += tmp[i].count(0)
	return sum
def dfs(x,y,cnt):
	global ans
	if cnt == 3:
		num = bfs()
		ans = max(ans,num)
		return
	for i in range(x,n):
		k = y if x == i else 0
		for j in range(k,m):
			if arr[i][j] == 0:
				arr[i][j] = 1
				if y + 1 == m:
					dfs(i+1,0,cnt+1)
				else :
					dfs(i,j+1,cnt+1)
				arr[i][j] = 0
n,m = list(map(int,input().split()))
arr = [list(map(int,input().split())) for _ in range(n)]
vir = [[i,j] for j in range(m) for i in range(n) if arr[i][j] == 2]
dfs(0,0,0)
print(ans)
